// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradeHub.Api.Models;

#nullable disable

namespace TradeHub.Api.Migrations
{
    [DbContext(typeof(TradeHubContext))]
    partial class TradeHubContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TradeHub.Api.Models.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Owner")
                        .HasColumnType("bigint");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TradeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("TradeId");

                    b.HasIndex("UserId");

                    b.ToTable("Items", (string)null);
                });

            modelBuilder.Entity("TradeHub.Api.Models.Offer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetimeoffset")
                        .HasDefaultValueSql("SYSDATETIMEOFFSET()");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("TradeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TradeId1")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TradeId");

                    b.HasIndex("TradeId1");

                    b.HasIndex("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("Offers", (string)null);
                });

            modelBuilder.Entity("TradeHub.Api.Models.Trade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("InitiatedId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReceivedId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("InitiatedId");

                    b.HasIndex("ReceivedId");

                    b.ToTable("Trades");
                });

            modelBuilder.Entity("TradeHub.Api.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("char(60)");

                    b.Property<byte>("Role")
                        .HasColumnType("tinyint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TradeHub.Api.Models.Item", b =>
                {
                    b.HasOne("TradeHub.Api.Models.Trade", null)
                        .WithMany("TradeItems")
                        .HasForeignKey("TradeId");

                    b.HasOne("TradeHub.Api.Models.User", null)
                        .WithMany("OwnedItems")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("TradeHub.Api.Models.Offer", b =>
                {
                    b.HasOne("TradeHub.Api.Models.Trade", "Trade")
                        .WithMany()
                        .HasForeignKey("TradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeHub.Api.Models.Trade", null)
                        .WithMany("Offers")
                        .HasForeignKey("TradeId1");

                    b.HasOne("TradeHub.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TradeHub.Api.Models.User", null)
                        .WithMany("Offers")
                        .HasForeignKey("UserId1");

                    b.Navigation("Trade");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TradeHub.Api.Models.Trade", b =>
                {
                    b.HasOne("TradeHub.Api.Models.User", "InitiatedUser")
                        .WithMany("InitiatedTrades")
                        .HasForeignKey("InitiatedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TradeHub.Api.Models.User", "ReceivedUser")
                        .WithMany("ReceivedTrades")
                        .HasForeignKey("ReceivedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("InitiatedUser");

                    b.Navigation("ReceivedUser");
                });

            modelBuilder.Entity("TradeHub.Api.Models.Trade", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("TradeItems");
                });

            modelBuilder.Entity("TradeHub.Api.Models.User", b =>
                {
                    b.Navigation("InitiatedTrades");

                    b.Navigation("Offers");

                    b.Navigation("OwnedItems");

                    b.Navigation("ReceivedTrades");
                });
#pragma warning restore 612, 618
        }
    }
}
